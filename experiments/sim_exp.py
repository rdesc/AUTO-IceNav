"""Runs consecutive experiments in simulation"""
import os
import pickle
from copy import deepcopy
from datetime import datetime

import numpy as np
import matplotlib
from matplotlib import pyplot as plt, patches
from tqdm import tqdm

from ship_ice_planner.src.utils.utils import DotDict
from sim2d_ship_ice_navigation import sim

matplotlib.use('Agg')

# loads the experiment configurations generated by `python generate_rand_exp.py`
EXPERIMENT_CONFIG_FILE = 'experiments/experiments_02-05_100.pk'
# contains the parameters of the planner and simulation
PLANNER_CONFIG_FILE = 'configs/sim_config.yaml'
# name for the base directory of all experiment output files
SIM_RUN_DIR_NAME = 'nrc-ice-tank-02-05-ice-concentration-100-trials'


def plot(polys, pose, concentration, vertices, goal, save_dir):
    fig, ax = plt.subplots(1)
    im = np.zeros(ddict['meta_data']['map_shape'])
    ax.imshow(im, origin='lower')

    for p in polys:
        patch = patches.Polygon(p['vertices'], True, fill=True)
        ax.add_patch(patch)

    # show ship footprint
    R = np.asarray([
        [np.cos(pose[2]), -np.sin(pose[2])],
        [np.sin(pose[2]), np.cos(pose[2])]
    ])
    # show pose on plots
    ax.add_patch(patches.Polygon(vertices @ R.T + [pose[0], pose[1]], True, fill=True))
    ax.plot(pose[0], pose[1], 'rx')

    # show goal
    ax.plot([0, ddict['meta_data']['map_shape'][1]], [goal[1], goal[1]], 'g-')
    ax.plot(goal[0], goal[1], 'rx')

    fig.suptitle('Concentration {:.2f}'.format(concentration))
    fig.savefig(os.path.join(save_dir, 'exp.png'))
    plt.close(fig)


def main(cfg_file, run_name):
    base_cfg = DotDict.load_from_file(cfg_file)
    base_cfg.output_dir = os.path.join('output', run_name)
    base_cfg.planner = 'lattice'
    base_cfg.anim.show = False
    base_cfg.plot.show = False

    if base_cfg.output_dir:
        # if dir already exists, make a new one with same name but with added date prefix
        if os.path.isdir(base_cfg.output_dir):
            base_cfg.output_dir += '-' + str(datetime.now().strftime('%m-%d_%H:%M:%S'))

    np.random.seed(base_cfg.get('seed', 0))

    # generate a separate config for each planner
    # baselines
    cfg1 = deepcopy(base_cfg)
    cfg1.planner = 'skeleton'

    cfg2 = deepcopy(base_cfg)
    cfg2.planner = 'straight'
    cfg2.a_star.horizon = 72

    cfg3 = deepcopy(base_cfg)
    cfg3.a_star.replan = False
    cfg3.a_star.horizon = 72

    planners = [
        ('lattice', deepcopy(base_cfg)),
        ('skeleton', cfg1),
        ('straight', cfg2),
        # ('no-replan', cfg3),  # will be straight line if no velocity at planning step 0

    ]

    for conc in tqdm(exp_dict):
        print('\nConcentration:', conc)

        for trial in tqdm(exp_dict[conc]):
            print('\nTrial:', trial)
            exp = exp_dict[conc][trial]

            print('ship state', exp['ship_state'])

            for (planner, cfg) in planners:
                print('\n\tPlanner', planner)
                cfg.output_dir = os.path.join(base_cfg.output_dir, str(conc), str(trial), planner)
                cfg.ship.start_pos = exp['ship_state']
                cfg.ship.goal_pos = exp['goal']

                sim(cfg=cfg,
                    debug=False,
                    logging=False,
                    log_level=40,
                    init_queue=deepcopy(exp))

            # save a plot of the experiment configuration
            plot(polys=exp['obstacles'],
                 pose=exp['ship_state'],
                 concentration=conc,
                 vertices=base_cfg.ship.vertices,
                 goal=exp['goal'],
                 save_dir=os.path.join(base_cfg.output_dir, str(conc), str(trial)))


if __name__ == '__main__':
    ddict = pickle.load(open(EXPERIMENT_CONFIG_FILE, 'rb'))
    exp_dict = ddict['exp']
    main(cfg_file=PLANNER_CONFIG_FILE,
         run_name=SIM_RUN_DIR_NAME)
